<script>
// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
  // Load GSAP if not already loaded
  if (typeof gsap === 'undefined') {
    const gsapScript = document.createElement('script');
    gsapScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
    gsapScript.onload = loadScrollTrigger;
    document.head.appendChild(gsapScript);
  } else {
    loadScrollTrigger();
  }

  function loadScrollTrigger() {
    if (typeof ScrollTrigger === 'undefined') {
      const scrollTriggerScript = document.createElement('script');
      scrollTriggerScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js';
      scrollTriggerScript.onload = loadSplitText;
      document.head.appendChild(scrollTriggerScript);
    } else {
      loadSplitText();
    }
  }

  function loadSplitText() {
    if (typeof SplitType === 'undefined') {
      const splitTextScript = document.createElement('script');
      splitTextScript.src = 'https://unpkg.com/split-type';
      splitTextScript.onload = initAnimations;
      document.head.appendChild(splitTextScript);
    } else {
      initAnimations();
    }
  }

  function initAnimations() {
    // Register ScrollTrigger plugin
    gsap.registerPlugin(ScrollTrigger);
    
    // Define section IDs for sequential animations
    const sectionIds = [
      'header',
      'services',
      'works',
      'about',
			'testimonials'
      // Add more section IDs as needed
    ];
    
    // Process each section
    sectionIds.forEach(sectionId => {
      const section = document.getElementById(sectionId);
      if (!section) return; // Skip if section doesn't exist
      
      // Find all elements with the blur attribute in this section
      const blurElements = section.querySelectorAll('[split-text="blur"]');
      
      if (blurElements.length === 0) return;
      
      // Create a timeline for this section
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: section,
          start: 'top 80%',
          toggleActions: 'play none none none',
          once: true,
        }
      });
      
      // Process each element in sequence
      blurElements.forEach((element, index) => {
        // Split text into characters
        const splitText = new SplitType(element, { types: 'chars' });
        const chars = splitText.chars;
        
        // Set initial state - now coming from left instead of right
        gsap.set(chars, { 
          opacity: 0,
          filter: 'blur(10px)',
          x: -20  // Changed from 20 to -20 to reverse direction
        });
        
        // Add to timeline with staggered animation from left to right
        tl.to(chars, {
          opacity: 1,
          filter: 'blur(0px)',
          x: 0,
          duration: 0.8,
          ease: 'power2.out',
          stagger: {
            amount: 0.3,
            from: "start"  // Changed from "end" to "start" to reverse direction
          }
        }, index * 0.2); // Delay between elements
      });
    });
    
    // Handle individual elements not in specified sections
    const standaloneElements = document.querySelectorAll('[split-text="blur"]');
    
    standaloneElements.forEach(element => {
      // Skip elements that are already in our animated sections
      let isInAnimatedSection = false;
      sectionIds.forEach(sectionId => {
        if (document.getElementById(sectionId)?.contains(element)) {
          isInAnimatedSection = true;
        }
      });
      
      if (isInAnimatedSection) return;
      
      // Split text into characters
      const splitText = new SplitType(element, { types: 'chars' });
      const chars = splitText.chars;
      
      // Set initial state - now coming from left instead of right
      gsap.set(chars, { 
        opacity: 0,
        filter: 'blur(10px)',
        x: -20  // Changed from 20 to -20 to reverse direction
      });
      
      // Create animation
      gsap.timeline({
        scrollTrigger: {
          trigger: element,
          start: 'top 80%',
          toggleActions: 'play none none none',
          once: true,
        }
      })
      .to(chars, {
        opacity: 1,
        filter: 'blur(0px)',
        x: 0,
        duration: 0.8,
        ease: 'power2.out',
        stagger: {
          amount: 0.3,
          from: "start"  // Changed from "end" to "start" to reverse direction
        }
      });
    });
  }
});
</script>